//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Ami_Diagnostic_Service
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PingByEndpointsRequest", Namespace="http://www.itron.com/ami/2012/03/control/diagnostic")]
    public partial class PingByEndpointsRequest : object
    {
        
        private Ami_Diagnostic_Service.EndpointCollectionRequest EndpointCollectionRequestField;
        
        private System.Xml.XmlNode[] MetadataField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public Ami_Diagnostic_Service.EndpointCollectionRequest EndpointCollectionRequest
        {
            get
            {
                return this.EndpointCollectionRequestField;
            }
            set
            {
                this.EndpointCollectionRequestField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Xml.XmlNode[] Metadata
        {
            get
            {
                return this.MetadataField;
            }
            set
            {
                this.MetadataField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EndpointCollectionRequest", Namespace="http://www.itron.com/ami/2008/10/common")]
    public partial class EndpointCollectionRequest : object
    {
        
        private string[] ElectronicSerialNumbersField;
        
        private System.Uri StatusChangedServiceField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string[] ElectronicSerialNumbers
        {
            get
            {
                return this.ElectronicSerialNumbersField;
            }
            set
            {
                this.ElectronicSerialNumbersField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Uri StatusChangedService
        {
            get
            {
                return this.StatusChangedServiceField;
            }
            set
            {
                this.StatusChangedServiceField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RequestToken", Namespace="http://www.itron.com/ami/2008/10/common")]
    public partial class RequestToken : object
    {
        
        private System.Guid IdField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Guid Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                this.IdField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OperationFault", Namespace="http://www.itron.com/ami/2008/10/common")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Ami_Diagnostic_Service.DeviceNotFoundFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Ami_Diagnostic_Service.DuplicateSubscriberEndpointFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Ami_Diagnostic_Service.DuplicateSubscriberFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Ami_Diagnostic_Service.DuplicateSubscriptionFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Ami_Diagnostic_Service.EndpointNotFoundFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Ami_Diagnostic_Service.EndpointNotRegisteredFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Ami_Diagnostic_Service.GroupNotFoundFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Ami_Diagnostic_Service.InvalidDateTimeRangeFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Ami_Diagnostic_Service.InvalidUriFormatFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Ami_Diagnostic_Service.MeterNotFoundFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Ami_Diagnostic_Service.MeterNotRegisteredFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Ami_Diagnostic_Service.OperationNotSupportedFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Ami_Diagnostic_Service.NoValidTargetsFoundFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Ami_Diagnostic_Service.RequestNotFinishedFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Ami_Diagnostic_Service.RequestNotFoundFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Ami_Diagnostic_Service.SubscriberEndpointNotFoundFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Ami_Diagnostic_Service.SubscriberNotFoundFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Ami_Diagnostic_Service.TooManyCommandsFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Ami_Diagnostic_Service.TooManyConcurrentRequestsFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Ami_Diagnostic_Service.TooManySubscribersFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Ami_Diagnostic_Service.ArgumentFault))]
    public partial class OperationFault : object
    {
        
        private string MessageField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message
        {
            get
            {
                return this.MessageField;
            }
            set
            {
                this.MessageField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DeviceNotFoundFault", Namespace="http://www.itron.com/ami/2008/10/common")]
    public partial class DeviceNotFoundFault : Ami_Diagnostic_Service.OperationFault
    {
        
        private ulong MacAddressField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ulong MacAddress
        {
            get
            {
                return this.MacAddressField;
            }
            set
            {
                this.MacAddressField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DuplicateSubscriberEndpointFault", Namespace="http://www.itron.com/ami/2008/10/common")]
    public partial class DuplicateSubscriberEndpointFault : Ami_Diagnostic_Service.OperationFault
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DuplicateSubscriberFault", Namespace="http://www.itron.com/ami/2008/10/common")]
    public partial class DuplicateSubscriberFault : Ami_Diagnostic_Service.OperationFault
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DuplicateSubscriptionFault", Namespace="http://www.itron.com/ami/2008/10/common")]
    public partial class DuplicateSubscriptionFault : Ami_Diagnostic_Service.OperationFault
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EndpointNotFoundFault", Namespace="http://www.itron.com/ami/2008/10/common")]
    public partial class EndpointNotFoundFault : Ami_Diagnostic_Service.OperationFault
    {
        
        private string IdentifierField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Identifier
        {
            get
            {
                return this.IdentifierField;
            }
            set
            {
                this.IdentifierField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EndpointNotRegisteredFault", Namespace="http://www.itron.com/ami/2008/10/common")]
    public partial class EndpointNotRegisteredFault : Ami_Diagnostic_Service.OperationFault
    {
        
        private string IdentifierField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Identifier
        {
            get
            {
                return this.IdentifierField;
            }
            set
            {
                this.IdentifierField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GroupNotFoundFault", Namespace="http://www.itron.com/ami/2008/10/common")]
    public partial class GroupNotFoundFault : Ami_Diagnostic_Service.OperationFault
    {
        
        private string GroupNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GroupName
        {
            get
            {
                return this.GroupNameField;
            }
            set
            {
                this.GroupNameField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InvalidDateTimeRangeFault", Namespace="http://www.itron.com/ami/2008/10/common")]
    public partial class InvalidDateTimeRangeFault : Ami_Diagnostic_Service.OperationFault
    {
        
        private System.DateTime StartField;
        
        private System.DateTime EndField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.DateTime Start
        {
            get
            {
                return this.StartField;
            }
            set
            {
                this.StartField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true, Order=1)]
        public System.DateTime End
        {
            get
            {
                return this.EndField;
            }
            set
            {
                this.EndField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InvalidUriFormatFault", Namespace="http://www.itron.com/ami/2008/10/common")]
    public partial class InvalidUriFormatFault : Ami_Diagnostic_Service.OperationFault
    {
        
        private System.Uri UriField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Uri Uri
        {
            get
            {
                return this.UriField;
            }
            set
            {
                this.UriField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MeterNotFoundFault", Namespace="http://www.itron.com/ami/2008/10/common")]
    public partial class MeterNotFoundFault : Ami_Diagnostic_Service.OperationFault
    {
        
        private string ElectronicSerialNumberField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ElectronicSerialNumber
        {
            get
            {
                return this.ElectronicSerialNumberField;
            }
            set
            {
                this.ElectronicSerialNumberField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MeterNotRegisteredFault", Namespace="http://www.itron.com/ami/2008/10/common")]
    public partial class MeterNotRegisteredFault : Ami_Diagnostic_Service.OperationFault
    {
        
        private string ElectronicSerialNumberField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ElectronicSerialNumber
        {
            get
            {
                return this.ElectronicSerialNumberField;
            }
            set
            {
                this.ElectronicSerialNumberField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OperationNotSupportedFault", Namespace="http://www.itron.com/ami/2008/10/common")]
    public partial class OperationNotSupportedFault : Ami_Diagnostic_Service.OperationFault
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NoValidTargetsFoundFault", Namespace="http://www.itron.com/ami/2008/10/common")]
    public partial class NoValidTargetsFoundFault : Ami_Diagnostic_Service.OperationFault
    {
        
        private Ami_Diagnostic_Service.EndpointFailure[] InvalidEndpointsField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Ami_Diagnostic_Service.EndpointFailure[] InvalidEndpoints
        {
            get
            {
                return this.InvalidEndpointsField;
            }
            set
            {
                this.InvalidEndpointsField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RequestNotFinishedFault", Namespace="http://www.itron.com/ami/2008/10/common")]
    public partial class RequestNotFinishedFault : Ami_Diagnostic_Service.OperationFault
    {
        
        private System.Guid IdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                this.IdField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RequestNotFoundFault", Namespace="http://www.itron.com/ami/2008/10/common")]
    public partial class RequestNotFoundFault : Ami_Diagnostic_Service.OperationFault
    {
        
        private System.Guid IdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                this.IdField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SubscriberEndpointNotFoundFault", Namespace="http://www.itron.com/ami/2008/10/common")]
    public partial class SubscriberEndpointNotFoundFault : Ami_Diagnostic_Service.OperationFault
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SubscriberNotFoundFault", Namespace="http://www.itron.com/ami/2008/10/common")]
    public partial class SubscriberNotFoundFault : Ami_Diagnostic_Service.OperationFault
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TooManyCommandsFault", Namespace="http://www.itron.com/ami/2008/10/common")]
    public partial class TooManyCommandsFault : Ami_Diagnostic_Service.OperationFault
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TooManyConcurrentRequestsFault", Namespace="http://www.itron.com/ami/2008/10/common")]
    public partial class TooManyConcurrentRequestsFault : Ami_Diagnostic_Service.OperationFault
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TooManySubscribersFault", Namespace="http://www.itron.com/ami/2008/10/common")]
    public partial class TooManySubscribersFault : Ami_Diagnostic_Service.OperationFault
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ArgumentFault", Namespace="http://www.itron.com/ami/2008/10/common")]
    public partial class ArgumentFault : Ami_Diagnostic_Service.OperationFault
    {
        
        private string ParameterNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ParameterName
        {
            get
            {
                return this.ParameterNameField;
            }
            set
            {
                this.ParameterNameField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EndpointFailure", Namespace="http://www.itron.com/ami/2008/10/common")]
    public partial class EndpointFailure : object
    {
        
        private string ElectronicSerialNumberField;
        
        private Ami_Diagnostic_Service.FailureReason FailureReasonField;
        
        private string DescriptionField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string ElectronicSerialNumber
        {
            get
            {
                return this.ElectronicSerialNumberField;
            }
            set
            {
                this.ElectronicSerialNumberField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public Ami_Diagnostic_Service.FailureReason FailureReason
        {
            get
            {
                return this.FailureReasonField;
            }
            set
            {
                this.FailureReasonField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=2)]
        public string Description
        {
            get
            {
                return this.DescriptionField;
            }
            set
            {
                this.DescriptionField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FailureReason", Namespace="http://www.itron.com/ami/2008/10/common")]
    public enum FailureReason : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unspecified = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TargetNotRegistered = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TargetNotFound = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CommunicationError = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SecurityFailure = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ConfigurationError = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OperationNotSupported = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ErrorResponse = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NoResponse = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidIdentifier = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidTargetState = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PublishingError = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TooManyRequests = 12,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TypeMismatch = 13,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ReadWriteDenied = 14,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SecurityFault", Namespace="http://www.itron.com/ami/2008/10/security")]
    public partial class SecurityFault : object
    {
        
        private System.Guid IdField;
        
        private System.DateTime OccurredWhenField;
        
        private string MessageField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Guid Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                this.IdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.DateTime OccurredWhen
        {
            get
            {
                return this.OccurredWhenField;
            }
            set
            {
                this.OccurredWhenField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true, Order=2)]
        public string Message
        {
            get
            {
                return this.MessageField;
            }
            set
            {
                this.MessageField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EndpointCollectionRequestResult", Namespace="http://www.itron.com/ami/2012/03/control/diagnostic")]
    public partial class EndpointCollectionRequestResult : object
    {
        
        private Ami_Diagnostic_Service.RequestToken RequestTokenField;
        
        private Ami_Diagnostic_Service.Result ResultField;
        
        private Ami_Diagnostic_Service.EndpointFailureResult EndpointFailureResultField;
        
        private System.Xml.XmlNode[] MetadataField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public Ami_Diagnostic_Service.RequestToken RequestToken
        {
            get
            {
                return this.RequestTokenField;
            }
            set
            {
                this.RequestTokenField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public Ami_Diagnostic_Service.Result Result
        {
            get
            {
                return this.ResultField;
            }
            set
            {
                this.ResultField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=2)]
        public Ami_Diagnostic_Service.EndpointFailureResult EndpointFailureResult
        {
            get
            {
                return this.EndpointFailureResultField;
            }
            set
            {
                this.EndpointFailureResultField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=3)]
        public System.Xml.XmlNode[] Metadata
        {
            get
            {
                return this.MetadataField;
            }
            set
            {
                this.MetadataField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EndpointFailureResult", Namespace="http://www.itron.com/ami/2012/03/control/diagnostic")]
    public partial class EndpointFailureResult : object
    {
        
        private Ami_Diagnostic_Service.EndpointFailure1[] FailuresField;
        
        private bool MaximumResultsSentField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public Ami_Diagnostic_Service.EndpointFailure1[] Failures
        {
            get
            {
                return this.FailuresField;
            }
            set
            {
                this.FailuresField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool MaximumResultsSent
        {
            get
            {
                return this.MaximumResultsSentField;
            }
            set
            {
                this.MaximumResultsSentField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Result", Namespace="http://www.itron.com/ami/2008/10/common")]
    public enum Result : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Pending = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Success = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Failure = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Canceled = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EndpointFailure", Namespace="http://www.itron.com/ami/2012/03/control/diagnostic")]
    public partial class EndpointFailure1 : object
    {
        
        private string ElectronicSerialNumberField;
        
        private Ami_Diagnostic_Service.FailureReason1 FailureReasonField;
        
        private string DescriptionField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string ElectronicSerialNumber
        {
            get
            {
                return this.ElectronicSerialNumberField;
            }
            set
            {
                this.ElectronicSerialNumberField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public Ami_Diagnostic_Service.FailureReason1 FailureReason
        {
            get
            {
                return this.FailureReasonField;
            }
            set
            {
                this.FailureReasonField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=2)]
        public string Description
        {
            get
            {
                return this.DescriptionField;
            }
            set
            {
                this.DescriptionField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FailureReason", Namespace="http://www.itron.com/ami/2012/03/control/diagnostic")]
    public enum FailureReason1 : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unspecified = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TargetNotRegistered = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CommunicationError = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SecurityFailure = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OperationNotSupported = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ErrorResponse = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NoResponse = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidIdentifier = 7,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PingByGroupRequest", Namespace="http://www.itron.com/ami/2012/03/control/diagnostic")]
    public partial class PingByGroupRequest : object
    {
        
        private Ami_Diagnostic_Service.GroupRequest GroupRequestField;
        
        private System.Xml.XmlNode[] MetadataField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public Ami_Diagnostic_Service.GroupRequest GroupRequest
        {
            get
            {
                return this.GroupRequestField;
            }
            set
            {
                this.GroupRequestField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Xml.XmlNode[] Metadata
        {
            get
            {
                return this.MetadataField;
            }
            set
            {
                this.MetadataField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GroupRequest", Namespace="http://www.itron.com/ami/2008/10/common")]
    public partial class GroupRequest : object
    {
        
        private string GroupNameField;
        
        private System.Uri StatusChangedServiceField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string GroupName
        {
            get
            {
                return this.GroupNameField;
            }
            set
            {
                this.GroupNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Uri StatusChangedService
        {
            get
            {
                return this.StatusChangedServiceField;
            }
            set
            {
                this.StatusChangedServiceField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GroupRequestResult", Namespace="http://www.itron.com/ami/2012/03/control/diagnostic")]
    public partial class GroupRequestResult : object
    {
        
        private Ami_Diagnostic_Service.RequestToken RequestTokenField;
        
        private string GroupNameField;
        
        private Ami_Diagnostic_Service.Result ResultField;
        
        private Ami_Diagnostic_Service.EndpointFailureResult EndpointFailureResultField;
        
        private System.Xml.XmlNode[] MetadataField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public Ami_Diagnostic_Service.RequestToken RequestToken
        {
            get
            {
                return this.RequestTokenField;
            }
            set
            {
                this.RequestTokenField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true, Order=1)]
        public string GroupName
        {
            get
            {
                return this.GroupNameField;
            }
            set
            {
                this.GroupNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true, Order=2)]
        public Ami_Diagnostic_Service.Result Result
        {
            get
            {
                return this.ResultField;
            }
            set
            {
                this.ResultField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=3)]
        public Ami_Diagnostic_Service.EndpointFailureResult EndpointFailureResult
        {
            get
            {
                return this.EndpointFailureResultField;
            }
            set
            {
                this.EndpointFailureResultField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=4)]
        public System.Xml.XmlNode[] Metadata
        {
            get
            {
                return this.MetadataField;
            }
            set
            {
                this.MetadataField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ReadFirmwareAndHardwareVersionsByMetersRequest", Namespace="http://www.itron.com/ami/2012/03/control/diagnostic")]
    public partial class ReadFirmwareAndHardwareVersionsByMetersRequest : object
    {
        
        private Ami_Diagnostic_Service.EndpointCollectionRequest EndpointCollectionRequestField;
        
        private System.Xml.XmlNode[] MetadataField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public Ami_Diagnostic_Service.EndpointCollectionRequest EndpointCollectionRequest
        {
            get
            {
                return this.EndpointCollectionRequestField;
            }
            set
            {
                this.EndpointCollectionRequestField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Xml.XmlNode[] Metadata
        {
            get
            {
                return this.MetadataField;
            }
            set
            {
                this.MetadataField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ReadFirmwareAndHardwareVersionsByMetersResult", Namespace="http://www.itron.com/ami/2012/03/control/diagnostic")]
    public partial class ReadFirmwareAndHardwareVersionsByMetersResult : object
    {
        
        private Ami_Diagnostic_Service.RequestToken RequestTokenField;
        
        private Ami_Diagnostic_Service.Result ResultField;
        
        private Ami_Diagnostic_Service.EndpointFailureResult EndpointFailureResultField;
        
        private Ami_Diagnostic_Service.FirmwareAndHardwareVersions[] MeterFirmwareAndHardwareVersionsField;
        
        private System.Xml.XmlNode[] MetadataField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public Ami_Diagnostic_Service.RequestToken RequestToken
        {
            get
            {
                return this.RequestTokenField;
            }
            set
            {
                this.RequestTokenField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public Ami_Diagnostic_Service.Result Result
        {
            get
            {
                return this.ResultField;
            }
            set
            {
                this.ResultField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=2)]
        public Ami_Diagnostic_Service.EndpointFailureResult EndpointFailureResult
        {
            get
            {
                return this.EndpointFailureResultField;
            }
            set
            {
                this.EndpointFailureResultField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=3)]
        public Ami_Diagnostic_Service.FirmwareAndHardwareVersions[] MeterFirmwareAndHardwareVersions
        {
            get
            {
                return this.MeterFirmwareAndHardwareVersionsField;
            }
            set
            {
                this.MeterFirmwareAndHardwareVersionsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=4)]
        public System.Xml.XmlNode[] Metadata
        {
            get
            {
                return this.MetadataField;
            }
            set
            {
                this.MetadataField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FirmwareAndHardwareVersions", Namespace="http://www.itron.com/ami/2012/03/control/diagnostic")]
    public partial class FirmwareAndHardwareVersions : object
    {
        
        private string ElectronicSerialNumberField;
        
        private string HardwareVersionField;
        
        private string CommunicationsModuleFirmwareVersionField;
        
        private string HanModuleFirmwareVersionField;
        
        private string EndpointRegisterFirmwareVersionField;
        
        private Ami_Diagnostic_Service.OtherFirmwareVersion[] OtherFirmwareVersionsField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string ElectronicSerialNumber
        {
            get
            {
                return this.ElectronicSerialNumberField;
            }
            set
            {
                this.ElectronicSerialNumberField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string HardwareVersion
        {
            get
            {
                return this.HardwareVersionField;
            }
            set
            {
                this.HardwareVersionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=2)]
        public string CommunicationsModuleFirmwareVersion
        {
            get
            {
                return this.CommunicationsModuleFirmwareVersionField;
            }
            set
            {
                this.CommunicationsModuleFirmwareVersionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=3)]
        public string HanModuleFirmwareVersion
        {
            get
            {
                return this.HanModuleFirmwareVersionField;
            }
            set
            {
                this.HanModuleFirmwareVersionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=4)]
        public string EndpointRegisterFirmwareVersion
        {
            get
            {
                return this.EndpointRegisterFirmwareVersionField;
            }
            set
            {
                this.EndpointRegisterFirmwareVersionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=5)]
        public Ami_Diagnostic_Service.OtherFirmwareVersion[] OtherFirmwareVersions
        {
            get
            {
                return this.OtherFirmwareVersionsField;
            }
            set
            {
                this.OtherFirmwareVersionsField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OtherFirmwareVersion", Namespace="http://www.itron.com/ami/2012/03/control/diagnostic")]
    public partial class OtherFirmwareVersion : object
    {
        
        private string FirmwareTypeField;
        
        private string FirmwareVersionField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string FirmwareType
        {
            get
            {
                return this.FirmwareTypeField;
            }
            set
            {
                this.FirmwareTypeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string FirmwareVersion
        {
            get
            {
                return this.FirmwareVersionField;
            }
            set
            {
                this.FirmwareVersionField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ReregisterByMetersRequest", Namespace="http://www.itron.com/ami/2012/03/control/diagnostic")]
    public partial class ReregisterByMetersRequest : object
    {
        
        private Ami_Diagnostic_Service.EndpointCollectionRequest EndpointCollectionRequestField;
        
        private System.Xml.XmlNode[] MetadataField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public Ami_Diagnostic_Service.EndpointCollectionRequest EndpointCollectionRequest
        {
            get
            {
                return this.EndpointCollectionRequestField;
            }
            set
            {
                this.EndpointCollectionRequestField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Xml.XmlNode[] Metadata
        {
            get
            {
                return this.MetadataField;
            }
            set
            {
                this.MetadataField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ReadRfLanClockByMetersRequest", Namespace="http://www.itron.com/ami/2012/03/control/diagnostic")]
    public partial class ReadRfLanClockByMetersRequest : object
    {
        
        private Ami_Diagnostic_Service.EndpointCollectionRequest EndpointCollectionRequestField;
        
        private System.Xml.XmlNode[] MetadataField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public Ami_Diagnostic_Service.EndpointCollectionRequest EndpointCollectionRequest
        {
            get
            {
                return this.EndpointCollectionRequestField;
            }
            set
            {
                this.EndpointCollectionRequestField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Xml.XmlNode[] Metadata
        {
            get
            {
                return this.MetadataField;
            }
            set
            {
                this.MetadataField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ReadRfLanClockByMetersResult", Namespace="http://www.itron.com/ami/2012/03/control/diagnostic")]
    public partial class ReadRfLanClockByMetersResult : object
    {
        
        private Ami_Diagnostic_Service.RequestToken RequestTokenField;
        
        private Ami_Diagnostic_Service.Result ResultField;
        
        private Ami_Diagnostic_Service.EndpointFailureResult EndpointFailureResultField;
        
        private Ami_Diagnostic_Service.RfLanClockInfo[] MeterRfLanClockResultsField;
        
        private System.Xml.XmlNode[] MetadataField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public Ami_Diagnostic_Service.RequestToken RequestToken
        {
            get
            {
                return this.RequestTokenField;
            }
            set
            {
                this.RequestTokenField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public Ami_Diagnostic_Service.Result Result
        {
            get
            {
                return this.ResultField;
            }
            set
            {
                this.ResultField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=2)]
        public Ami_Diagnostic_Service.EndpointFailureResult EndpointFailureResult
        {
            get
            {
                return this.EndpointFailureResultField;
            }
            set
            {
                this.EndpointFailureResultField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=3)]
        public Ami_Diagnostic_Service.RfLanClockInfo[] MeterRfLanClockResults
        {
            get
            {
                return this.MeterRfLanClockResultsField;
            }
            set
            {
                this.MeterRfLanClockResultsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=4)]
        public System.Xml.XmlNode[] Metadata
        {
            get
            {
                return this.MetadataField;
            }
            set
            {
                this.MetadataField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RfLanClockInfo", Namespace="http://www.itron.com/ami/2012/03/control/diagnostic")]
    public partial class RfLanClockInfo : object
    {
        
        private string ElectronicSerialNumberField;
        
        private System.Nullable<System.TimeSpan> RfLanTimeDifferenceField;
        
        private System.Nullable<System.TimeSpan> RfLanTimeDifferenceErrorField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string ElectronicSerialNumber
        {
            get
            {
                return this.ElectronicSerialNumberField;
            }
            set
            {
                this.ElectronicSerialNumberField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<System.TimeSpan> RfLanTimeDifference
        {
            get
            {
                return this.RfLanTimeDifferenceField;
            }
            set
            {
                this.RfLanTimeDifferenceField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<System.TimeSpan> RfLanTimeDifferenceError
        {
            get
            {
                return this.RfLanTimeDifferenceErrorField;
            }
            set
            {
                this.RfLanTimeDifferenceErrorField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ReadDisconnectStateByMetersRequest", Namespace="http://www.itron.com/ami/2012/03/control/diagnostic")]
    public partial class ReadDisconnectStateByMetersRequest : object
    {
        
        private Ami_Diagnostic_Service.EndpointCollectionRequest EndpointCollectionRequestField;
        
        private System.Xml.XmlNode[] MetadataField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public Ami_Diagnostic_Service.EndpointCollectionRequest EndpointCollectionRequest
        {
            get
            {
                return this.EndpointCollectionRequestField;
            }
            set
            {
                this.EndpointCollectionRequestField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Xml.XmlNode[] Metadata
        {
            get
            {
                return this.MetadataField;
            }
            set
            {
                this.MetadataField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ReadDisconnectStateByMetersResult", Namespace="http://www.itron.com/ami/2012/03/control/diagnostic")]
    public partial class ReadDisconnectStateByMetersResult : object
    {
        
        private Ami_Diagnostic_Service.RequestToken RequestTokenField;
        
        private Ami_Diagnostic_Service.Result ResultField;
        
        private Ami_Diagnostic_Service.EndpointFailureResult EndpointFailureResultField;
        
        private Ami_Diagnostic_Service.DisconnectSwitchInfo[] MeterDisconnectSwitchResultsField;
        
        private System.Xml.XmlNode[] MetadataField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public Ami_Diagnostic_Service.RequestToken RequestToken
        {
            get
            {
                return this.RequestTokenField;
            }
            set
            {
                this.RequestTokenField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public Ami_Diagnostic_Service.Result Result
        {
            get
            {
                return this.ResultField;
            }
            set
            {
                this.ResultField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=2)]
        public Ami_Diagnostic_Service.EndpointFailureResult EndpointFailureResult
        {
            get
            {
                return this.EndpointFailureResultField;
            }
            set
            {
                this.EndpointFailureResultField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=3)]
        public Ami_Diagnostic_Service.DisconnectSwitchInfo[] MeterDisconnectSwitchResults
        {
            get
            {
                return this.MeterDisconnectSwitchResultsField;
            }
            set
            {
                this.MeterDisconnectSwitchResultsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=4)]
        public System.Xml.XmlNode[] Metadata
        {
            get
            {
                return this.MetadataField;
            }
            set
            {
                this.MetadataField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DisconnectSwitchInfo", Namespace="http://www.itron.com/ami/2012/03/control/diagnostic")]
    public partial class DisconnectSwitchInfo : object
    {
        
        private string ElectronicSerialNumberField;
        
        private System.Nullable<Ami_Diagnostic_Service.DisconnectSwitchState> SwitchStateField;
        
        private System.Nullable<System.DateTime> LastSwitchStateUpdateTimeField;
        
        private string ExtendedSwitchStateField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string ElectronicSerialNumber
        {
            get
            {
                return this.ElectronicSerialNumberField;
            }
            set
            {
                this.ElectronicSerialNumberField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<Ami_Diagnostic_Service.DisconnectSwitchState> SwitchState
        {
            get
            {
                return this.SwitchStateField;
            }
            set
            {
                this.SwitchStateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=2)]
        public System.Nullable<System.DateTime> LastSwitchStateUpdateTime
        {
            get
            {
                return this.LastSwitchStateUpdateTimeField;
            }
            set
            {
                this.LastSwitchStateUpdateTimeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=3)]
        public string ExtendedSwitchState
        {
            get
            {
                return this.ExtendedSwitchStateField;
            }
            set
            {
                this.ExtendedSwitchStateField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DisconnectSwitchState", Namespace="http://www.itron.com/ami/2012/03/control/diagnostic")]
    public enum DisconnectSwitchState : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unknown = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Connected = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Disconnected = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Armed = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DisconnectedOrDiversion = 4,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RetrieveStatsByEndpointsRequest", Namespace="http://www.itron.com/ami/2012/03/control/diagnostic")]
    public partial class RetrieveStatsByEndpointsRequest : object
    {
        
        private Ami_Diagnostic_Service.EndpointCollectionRequest EndpointCollectionRequestField;
        
        private System.Xml.XmlNode[] MetadataField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public Ami_Diagnostic_Service.EndpointCollectionRequest EndpointCollectionRequest
        {
            get
            {
                return this.EndpointCollectionRequestField;
            }
            set
            {
                this.EndpointCollectionRequestField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Xml.XmlNode[] Metadata
        {
            get
            {
                return this.MetadataField;
            }
            set
            {
                this.MetadataField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RetrieveStatsByEndpointsResult", Namespace="http://www.itron.com/ami/2012/03/control/diagnostic")]
    public partial class RetrieveStatsByEndpointsResult : object
    {
        
        private Ami_Diagnostic_Service.RequestToken RequestTokenField;
        
        private Ami_Diagnostic_Service.Result ResultField;
        
        private Ami_Diagnostic_Service.EndpointFailureResult EndpointFailureResultField;
        
        private string DataField;
        
        private System.Xml.XmlNode[] MetadataField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public Ami_Diagnostic_Service.RequestToken RequestToken
        {
            get
            {
                return this.RequestTokenField;
            }
            set
            {
                this.RequestTokenField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public Ami_Diagnostic_Service.Result Result
        {
            get
            {
                return this.ResultField;
            }
            set
            {
                this.ResultField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=2)]
        public Ami_Diagnostic_Service.EndpointFailureResult EndpointFailureResult
        {
            get
            {
                return this.EndpointFailureResultField;
            }
            set
            {
                this.EndpointFailureResultField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=3)]
        public string Data
        {
            get
            {
                return this.DataField;
            }
            set
            {
                this.DataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=4)]
        public System.Xml.XmlNode[] Metadata
        {
            get
            {
                return this.MetadataField;
            }
            set
            {
                this.MetadataField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DevicePingByEndpointsRequest", Namespace="http://www.itron.com/ami/2012/03/control/diagnostic")]
    public partial class DevicePingByEndpointsRequest : object
    {
        
        private Ami_Diagnostic_Service.EndpointCollectionRequest EndpointCollectionRequestField;
        
        private string IpAddressField;
        
        private System.Xml.XmlNode[] MetadataField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public Ami_Diagnostic_Service.EndpointCollectionRequest EndpointCollectionRequest
        {
            get
            {
                return this.EndpointCollectionRequestField;
            }
            set
            {
                this.EndpointCollectionRequestField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string IpAddress
        {
            get
            {
                return this.IpAddressField;
            }
            set
            {
                this.IpAddressField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Xml.XmlNode[] Metadata
        {
            get
            {
                return this.MetadataField;
            }
            set
            {
                this.MetadataField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DevicePingByEndpointsResult", Namespace="http://www.itron.com/ami/2012/03/control/diagnostic")]
    public partial class DevicePingByEndpointsResult : object
    {
        
        private Ami_Diagnostic_Service.RequestToken RequestTokenField;
        
        private Ami_Diagnostic_Service.Result ResultField;
        
        private Ami_Diagnostic_Service.EndpointFailureResult EndpointFailureResultField;
        
        private string DataField;
        
        private System.Xml.XmlNode[] MetadataField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public Ami_Diagnostic_Service.RequestToken RequestToken
        {
            get
            {
                return this.RequestTokenField;
            }
            set
            {
                this.RequestTokenField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public Ami_Diagnostic_Service.Result Result
        {
            get
            {
                return this.ResultField;
            }
            set
            {
                this.ResultField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=2)]
        public Ami_Diagnostic_Service.EndpointFailureResult EndpointFailureResult
        {
            get
            {
                return this.EndpointFailureResultField;
            }
            set
            {
                this.EndpointFailureResultField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=3)]
        public string Data
        {
            get
            {
                return this.DataField;
            }
            set
            {
                this.DataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=4)]
        public System.Xml.XmlNode[] Metadata
        {
            get
            {
                return this.MetadataField;
            }
            set
            {
                this.MetadataField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RetrieveTlvByEndpointsRequest", Namespace="http://www.itron.com/ami/2012/03/control/diagnostic")]
    public partial class RetrieveTlvByEndpointsRequest : object
    {
        
        private Ami_Diagnostic_Service.EndpointCollectionRequest EndpointCollectionRequestField;
        
        private string TlvListField;
        
        private System.Xml.XmlNode[] MetadataField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public Ami_Diagnostic_Service.EndpointCollectionRequest EndpointCollectionRequest
        {
            get
            {
                return this.EndpointCollectionRequestField;
            }
            set
            {
                this.EndpointCollectionRequestField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string TlvList
        {
            get
            {
                return this.TlvListField;
            }
            set
            {
                this.TlvListField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=2)]
        public System.Xml.XmlNode[] Metadata
        {
            get
            {
                return this.MetadataField;
            }
            set
            {
                this.MetadataField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RetrieveTlvByEndpointsResult", Namespace="http://www.itron.com/ami/2012/03/control/diagnostic")]
    public partial class RetrieveTlvByEndpointsResult : object
    {
        
        private Ami_Diagnostic_Service.RequestToken RequestTokenField;
        
        private Ami_Diagnostic_Service.Result ResultField;
        
        private Ami_Diagnostic_Service.EndpointFailureResult EndpointFailureResultField;
        
        private string DataField;
        
        private System.Xml.XmlNode[] MetadataField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public Ami_Diagnostic_Service.RequestToken RequestToken
        {
            get
            {
                return this.RequestTokenField;
            }
            set
            {
                this.RequestTokenField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public Ami_Diagnostic_Service.Result Result
        {
            get
            {
                return this.ResultField;
            }
            set
            {
                this.ResultField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=2)]
        public Ami_Diagnostic_Service.EndpointFailureResult EndpointFailureResult
        {
            get
            {
                return this.EndpointFailureResultField;
            }
            set
            {
                this.EndpointFailureResultField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=3)]
        public string Data
        {
            get
            {
                return this.DataField;
            }
            set
            {
                this.DataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=4)]
        public System.Xml.XmlNode[] Metadata
        {
            get
            {
                return this.MetadataField;
            }
            set
            {
                this.MetadataField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GetCurrentServiceStateInput", Namespace="http://www.itron.com/ami/2012/03/control/diagnostic")]
    public partial class GetCurrentServiceStateInput : object
    {
        
        private string MeterElectronicSerialNumberField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string MeterElectronicSerialNumber
        {
            get
            {
                return this.MeterElectronicSerialNumberField;
            }
            set
            {
                this.MeterElectronicSerialNumberField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GetCurrentServiceStateResult", Namespace="http://www.itron.com/ami/2012/03/control/diagnostic")]
    public partial class GetCurrentServiceStateResult : object
    {
        
        private string ServiceStateField;
        
        private Ami_Diagnostic_Service.EndpointFailure1 EndpointFailureField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string ServiceState
        {
            get
            {
                return this.ServiceStateField;
            }
            set
            {
                this.ServiceStateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=1)]
        public Ami_Diagnostic_Service.EndpointFailure1 EndpointFailure
        {
            get
            {
                return this.EndpointFailureField;
            }
            set
            {
                this.EndpointFailureField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GetCurrentServiceStateByEndpointsInput", Namespace="http://www.itron.com/ami/2012/03/control/diagnostic")]
    public partial class GetCurrentServiceStateByEndpointsInput : object
    {
        
        private string[] MeterElectronicSerialNumbersField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string[] MeterElectronicSerialNumbers
        {
            get
            {
                return this.MeterElectronicSerialNumbersField;
            }
            set
            {
                this.MeterElectronicSerialNumbersField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GetCurrentServiceStateByEndpointsResult", Namespace="http://www.itron.com/ami/2012/03/control/diagnostic")]
    public partial class GetCurrentServiceStateByEndpointsResult : object
    {
        
        private Ami_Diagnostic_Service.ServiceState[] ServiceStateField;
        
        private Ami_Diagnostic_Service.EndpointFailure1[] EndpointFailureField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Ami_Diagnostic_Service.ServiceState[] ServiceState
        {
            get
            {
                return this.ServiceStateField;
            }
            set
            {
                this.ServiceStateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=1)]
        public Ami_Diagnostic_Service.EndpointFailure1[] EndpointFailure
        {
            get
            {
                return this.EndpointFailureField;
            }
            set
            {
                this.EndpointFailureField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceState", Namespace="http://www.itron.com/ami/2012/03/control/diagnostic")]
    public partial class ServiceState : object
    {
        
        private string ESNField;
        
        private string ServiceControlStateField;
        
        private string ValveStateField;
        
        private string LastOperationDetailField;
        
        private string LastOperationMethodField;
        
        private string LastOperationTimeField;
        
        private string ActuationCountField;
        
        private string LastOperationResultField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string ESN
        {
            get
            {
                return this.ESNField;
            }
            set
            {
                this.ESNField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string ServiceControlState
        {
            get
            {
                return this.ServiceControlStateField;
            }
            set
            {
                this.ServiceControlStateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string ValveState
        {
            get
            {
                return this.ValveStateField;
            }
            set
            {
                this.ValveStateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=3)]
        public string LastOperationDetail
        {
            get
            {
                return this.LastOperationDetailField;
            }
            set
            {
                this.LastOperationDetailField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=4)]
        public string LastOperationMethod
        {
            get
            {
                return this.LastOperationMethodField;
            }
            set
            {
                this.LastOperationMethodField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=5)]
        public string LastOperationTime
        {
            get
            {
                return this.LastOperationTimeField;
            }
            set
            {
                this.LastOperationTimeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=6)]
        public string ActuationCount
        {
            get
            {
                return this.ActuationCountField;
            }
            set
            {
                this.ActuationCountField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=7)]
        public string LastOperationResult
        {
            get
            {
                return this.LastOperationResultField;
            }
            set
            {
                this.LastOperationResultField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.itron.com/ami/2012/03/control/diagnostic", ConfigurationName="Ami_Diagnostic_Service.DiagnosticService")]
    public interface DiagnosticService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/PingByEndpo" +
            "ints", ReplyAction="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/PingByEndpo" +
            "intsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.ArgumentFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/PingByEndpo" +
            "intsArgumentFault", Name="ArgumentFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.NoValidTargetsFoundFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/PingByEndpo" +
            "intsNoValidTargetsFoundFault", Name="NoValidTargetsFoundFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.InvalidUriFormatFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/PingByEndpo" +
            "intsInvalidUriFormatFault", Name="InvalidUriFormatFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.TooManyConcurrentRequestsFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/PingByEndpo" +
            "intsTooManyConcurrentRequestsFault", Name="TooManyConcurrentRequestsFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.OperationFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/PingByEndpo" +
            "intsOperationFault", Name="OperationFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.SecurityFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/PingByEndpo" +
            "intsSecurityFault", Name="SecurityFault")]
        Ami_Diagnostic_Service.RequestToken PingByEndpoints(Ami_Diagnostic_Service.PingByEndpointsRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/PingByEndpo" +
            "ints", ReplyAction="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/PingByEndpo" +
            "intsResponse")]
        System.Threading.Tasks.Task<Ami_Diagnostic_Service.RequestToken> PingByEndpointsAsync(Ami_Diagnostic_Service.PingByEndpointsRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetPingByEn" +
            "dpointsResult", ReplyAction="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetPingByEn" +
            "dpointsResultResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.ArgumentFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetPingByEn" +
            "dpointsResultArgumentFault", Name="ArgumentFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.RequestNotFoundFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetPingByEn" +
            "dpointsResultRequestNotFoundFault", Name="RequestNotFoundFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.RequestNotFinishedFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetPingByEn" +
            "dpointsResultRequestNotFinishedFault", Name="RequestNotFinishedFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.OperationFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetPingByEn" +
            "dpointsResultOperationFault", Name="OperationFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.SecurityFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetPingByEn" +
            "dpointsResultSecurityFault", Name="SecurityFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.TooManyConcurrentRequestsFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetPingByEn" +
            "dpointsResultTooManyConcurrentRequestsFault", Name="TooManyConcurrentRequestsFault")]
        Ami_Diagnostic_Service.EndpointCollectionRequestResult GetPingByEndpointsResult(Ami_Diagnostic_Service.RequestToken input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetPingByEn" +
            "dpointsResult", ReplyAction="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetPingByEn" +
            "dpointsResultResponse")]
        System.Threading.Tasks.Task<Ami_Diagnostic_Service.EndpointCollectionRequestResult> GetPingByEndpointsResultAsync(Ami_Diagnostic_Service.RequestToken input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/PingByGroup" +
            "", ReplyAction="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/PingByGroup" +
            "Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.ArgumentFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/PingByGroup" +
            "ArgumentFault", Name="ArgumentFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.GroupNotFoundFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/PingByGroup" +
            "GroupNotFoundFault", Name="GroupNotFoundFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.InvalidUriFormatFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/PingByGroup" +
            "InvalidUriFormatFault", Name="InvalidUriFormatFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.NoValidTargetsFoundFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/PingByGroup" +
            "NoValidTargetsFoundFault", Name="NoValidTargetsFoundFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.TooManyConcurrentRequestsFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/PingByGroup" +
            "TooManyConcurrentRequestsFault", Name="TooManyConcurrentRequestsFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.OperationFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/PingByGroup" +
            "OperationFault", Name="OperationFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.SecurityFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/PingByGroup" +
            "SecurityFault", Name="SecurityFault")]
        Ami_Diagnostic_Service.RequestToken PingByGroup(Ami_Diagnostic_Service.PingByGroupRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/PingByGroup" +
            "", ReplyAction="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/PingByGroup" +
            "Response")]
        System.Threading.Tasks.Task<Ami_Diagnostic_Service.RequestToken> PingByGroupAsync(Ami_Diagnostic_Service.PingByGroupRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetPingByGr" +
            "oupResult", ReplyAction="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetPingByGr" +
            "oupResultResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.ArgumentFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetPingByGr" +
            "oupResultArgumentFault", Name="ArgumentFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.RequestNotFoundFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetPingByGr" +
            "oupResultRequestNotFoundFault", Name="RequestNotFoundFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.RequestNotFinishedFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetPingByGr" +
            "oupResultRequestNotFinishedFault", Name="RequestNotFinishedFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.OperationFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetPingByGr" +
            "oupResultOperationFault", Name="OperationFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.SecurityFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetPingByGr" +
            "oupResultSecurityFault", Name="SecurityFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.TooManyConcurrentRequestsFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetPingByGr" +
            "oupResultTooManyConcurrentRequestsFault", Name="TooManyConcurrentRequestsFault")]
        Ami_Diagnostic_Service.GroupRequestResult GetPingByGroupResult(Ami_Diagnostic_Service.RequestToken input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetPingByGr" +
            "oupResult", ReplyAction="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetPingByGr" +
            "oupResultResponse")]
        System.Threading.Tasks.Task<Ami_Diagnostic_Service.GroupRequestResult> GetPingByGroupResultAsync(Ami_Diagnostic_Service.RequestToken input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/ReadFirmwar" +
            "eAndHardwareVersionsByMeters", ReplyAction="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/ReadFirmwar" +
            "eAndHardwareVersionsByMetersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.ArgumentFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/ReadFirmwar" +
            "eAndHardwareVersionsByMetersArgumentFault", Name="ArgumentFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.NoValidTargetsFoundFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/ReadFirmwar" +
            "eAndHardwareVersionsByMetersNoValidTargetsFoundFault", Name="NoValidTargetsFoundFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.TooManyConcurrentRequestsFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/ReadFirmwar" +
            "eAndHardwareVersionsByMetersTooManyConcurrentRequestsFault", Name="TooManyConcurrentRequestsFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.OperationFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/ReadFirmwar" +
            "eAndHardwareVersionsByMetersOperationFault", Name="OperationFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.SecurityFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/ReadFirmwar" +
            "eAndHardwareVersionsByMetersSecurityFault", Name="SecurityFault")]
        Ami_Diagnostic_Service.RequestToken ReadFirmwareAndHardwareVersionsByMeters(Ami_Diagnostic_Service.ReadFirmwareAndHardwareVersionsByMetersRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/ReadFirmwar" +
            "eAndHardwareVersionsByMeters", ReplyAction="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/ReadFirmwar" +
            "eAndHardwareVersionsByMetersResponse")]
        System.Threading.Tasks.Task<Ami_Diagnostic_Service.RequestToken> ReadFirmwareAndHardwareVersionsByMetersAsync(Ami_Diagnostic_Service.ReadFirmwareAndHardwareVersionsByMetersRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetReadFirm" +
            "wareAndHardwareVersionsByMetersResult", ReplyAction="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetReadFirm" +
            "wareAndHardwareVersionsByMetersResultResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.ArgumentFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetReadFirm" +
            "wareAndHardwareVersionsByMetersResultArgumentFault", Name="ArgumentFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.RequestNotFoundFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetReadFirm" +
            "wareAndHardwareVersionsByMetersResultRequestNotFoundFault", Name="RequestNotFoundFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.RequestNotFinishedFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetReadFirm" +
            "wareAndHardwareVersionsByMetersResultRequestNotFinishedFault", Name="RequestNotFinishedFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.OperationFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetReadFirm" +
            "wareAndHardwareVersionsByMetersResultOperationFault", Name="OperationFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.SecurityFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetReadFirm" +
            "wareAndHardwareVersionsByMetersResultSecurityFault", Name="SecurityFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.TooManyConcurrentRequestsFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetReadFirm" +
            "wareAndHardwareVersionsByMetersResultTooManyConcurrentRequestsFault", Name="TooManyConcurrentRequestsFault")]
        Ami_Diagnostic_Service.ReadFirmwareAndHardwareVersionsByMetersResult GetReadFirmwareAndHardwareVersionsByMetersResult(Ami_Diagnostic_Service.RequestToken input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetReadFirm" +
            "wareAndHardwareVersionsByMetersResult", ReplyAction="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetReadFirm" +
            "wareAndHardwareVersionsByMetersResultResponse")]
        System.Threading.Tasks.Task<Ami_Diagnostic_Service.ReadFirmwareAndHardwareVersionsByMetersResult> GetReadFirmwareAndHardwareVersionsByMetersResultAsync(Ami_Diagnostic_Service.RequestToken input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/ReregisterB" +
            "yMeters", ReplyAction="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/ReregisterB" +
            "yMetersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.ArgumentFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/ReregisterB" +
            "yMetersArgumentFault", Name="ArgumentFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.NoValidTargetsFoundFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/ReregisterB" +
            "yMetersNoValidTargetsFoundFault", Name="NoValidTargetsFoundFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.TooManyConcurrentRequestsFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/ReregisterB" +
            "yMetersTooManyConcurrentRequestsFault", Name="TooManyConcurrentRequestsFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.OperationFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/ReregisterB" +
            "yMetersOperationFault", Name="OperationFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.SecurityFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/ReregisterB" +
            "yMetersSecurityFault", Name="SecurityFault")]
        Ami_Diagnostic_Service.RequestToken ReregisterByMeters(Ami_Diagnostic_Service.ReregisterByMetersRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/ReregisterB" +
            "yMeters", ReplyAction="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/ReregisterB" +
            "yMetersResponse")]
        System.Threading.Tasks.Task<Ami_Diagnostic_Service.RequestToken> ReregisterByMetersAsync(Ami_Diagnostic_Service.ReregisterByMetersRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetReregist" +
            "erByMetersResult", ReplyAction="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetReregist" +
            "erByMetersResultResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.ArgumentFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetReregist" +
            "erByMetersResultArgumentFault", Name="ArgumentFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.RequestNotFoundFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetReregist" +
            "erByMetersResultRequestNotFoundFault", Name="RequestNotFoundFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.RequestNotFinishedFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetReregist" +
            "erByMetersResultRequestNotFinishedFault", Name="RequestNotFinishedFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.OperationFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetReregist" +
            "erByMetersResultOperationFault", Name="OperationFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.SecurityFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetReregist" +
            "erByMetersResultSecurityFault", Name="SecurityFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.TooManyConcurrentRequestsFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetReregist" +
            "erByMetersResultTooManyConcurrentRequestsFault", Name="TooManyConcurrentRequestsFault")]
        Ami_Diagnostic_Service.EndpointCollectionRequestResult GetReregisterByMetersResult(Ami_Diagnostic_Service.RequestToken input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetReregist" +
            "erByMetersResult", ReplyAction="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetReregist" +
            "erByMetersResultResponse")]
        System.Threading.Tasks.Task<Ami_Diagnostic_Service.EndpointCollectionRequestResult> GetReregisterByMetersResultAsync(Ami_Diagnostic_Service.RequestToken input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/ReadRfLanCl" +
            "ockByMeters", ReplyAction="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/ReadRfLanCl" +
            "ockByMetersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.ArgumentFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/ReadRfLanCl" +
            "ockByMetersArgumentFault", Name="ArgumentFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.NoValidTargetsFoundFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/ReadRfLanCl" +
            "ockByMetersNoValidTargetsFoundFault", Name="NoValidTargetsFoundFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.TooManyConcurrentRequestsFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/ReadRfLanCl" +
            "ockByMetersTooManyConcurrentRequestsFault", Name="TooManyConcurrentRequestsFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.OperationFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/ReadRfLanCl" +
            "ockByMetersOperationFault", Name="OperationFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.SecurityFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/ReadRfLanCl" +
            "ockByMetersSecurityFault", Name="SecurityFault")]
        Ami_Diagnostic_Service.RequestToken ReadRfLanClockByMeters(Ami_Diagnostic_Service.ReadRfLanClockByMetersRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/ReadRfLanCl" +
            "ockByMeters", ReplyAction="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/ReadRfLanCl" +
            "ockByMetersResponse")]
        System.Threading.Tasks.Task<Ami_Diagnostic_Service.RequestToken> ReadRfLanClockByMetersAsync(Ami_Diagnostic_Service.ReadRfLanClockByMetersRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetReadRfLa" +
            "nClockByMetersResult", ReplyAction="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetReadRfLa" +
            "nClockByMetersResultResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.ArgumentFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetReadRfLa" +
            "nClockByMetersResultArgumentFault", Name="ArgumentFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.RequestNotFoundFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetReadRfLa" +
            "nClockByMetersResultRequestNotFoundFault", Name="RequestNotFoundFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.RequestNotFinishedFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetReadRfLa" +
            "nClockByMetersResultRequestNotFinishedFault", Name="RequestNotFinishedFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.OperationFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetReadRfLa" +
            "nClockByMetersResultOperationFault", Name="OperationFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.SecurityFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetReadRfLa" +
            "nClockByMetersResultSecurityFault", Name="SecurityFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.TooManyConcurrentRequestsFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetReadRfLa" +
            "nClockByMetersResultTooManyConcurrentRequestsFault", Name="TooManyConcurrentRequestsFault")]
        Ami_Diagnostic_Service.ReadRfLanClockByMetersResult GetReadRfLanClockByMetersResult(Ami_Diagnostic_Service.RequestToken input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetReadRfLa" +
            "nClockByMetersResult", ReplyAction="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetReadRfLa" +
            "nClockByMetersResultResponse")]
        System.Threading.Tasks.Task<Ami_Diagnostic_Service.ReadRfLanClockByMetersResult> GetReadRfLanClockByMetersResultAsync(Ami_Diagnostic_Service.RequestToken input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/ReadDisconn" +
            "ectStateByMeters", ReplyAction="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/ReadDisconn" +
            "ectStateByMetersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.ArgumentFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/ReadDisconn" +
            "ectStateByMetersArgumentFault", Name="ArgumentFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.NoValidTargetsFoundFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/ReadDisconn" +
            "ectStateByMetersNoValidTargetsFoundFault", Name="NoValidTargetsFoundFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.TooManyConcurrentRequestsFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/ReadDisconn" +
            "ectStateByMetersTooManyConcurrentRequestsFault", Name="TooManyConcurrentRequestsFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.OperationFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/ReadDisconn" +
            "ectStateByMetersOperationFault", Name="OperationFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.SecurityFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/ReadDisconn" +
            "ectStateByMetersSecurityFault", Name="SecurityFault")]
        Ami_Diagnostic_Service.RequestToken ReadDisconnectStateByMeters(Ami_Diagnostic_Service.ReadDisconnectStateByMetersRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/ReadDisconn" +
            "ectStateByMeters", ReplyAction="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/ReadDisconn" +
            "ectStateByMetersResponse")]
        System.Threading.Tasks.Task<Ami_Diagnostic_Service.RequestToken> ReadDisconnectStateByMetersAsync(Ami_Diagnostic_Service.ReadDisconnectStateByMetersRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetReadDisc" +
            "onnectStateByMetersResult", ReplyAction="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetReadDisc" +
            "onnectStateByMetersResultResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.ArgumentFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetReadDisc" +
            "onnectStateByMetersResultArgumentFault", Name="ArgumentFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.RequestNotFoundFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetReadDisc" +
            "onnectStateByMetersResultRequestNotFoundFault", Name="RequestNotFoundFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.RequestNotFinishedFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetReadDisc" +
            "onnectStateByMetersResultRequestNotFinishedFault", Name="RequestNotFinishedFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.OperationFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetReadDisc" +
            "onnectStateByMetersResultOperationFault", Name="OperationFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.SecurityFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetReadDisc" +
            "onnectStateByMetersResultSecurityFault", Name="SecurityFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.TooManyConcurrentRequestsFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetReadDisc" +
            "onnectStateByMetersResultTooManyConcurrentRequestsFault", Name="TooManyConcurrentRequestsFault")]
        Ami_Diagnostic_Service.ReadDisconnectStateByMetersResult GetReadDisconnectStateByMetersResult(Ami_Diagnostic_Service.RequestToken input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetReadDisc" +
            "onnectStateByMetersResult", ReplyAction="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetReadDisc" +
            "onnectStateByMetersResultResponse")]
        System.Threading.Tasks.Task<Ami_Diagnostic_Service.ReadDisconnectStateByMetersResult> GetReadDisconnectStateByMetersResultAsync(Ami_Diagnostic_Service.RequestToken input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/RetrieveSta" +
            "tsByEndpoints", ReplyAction="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/RetrieveSta" +
            "tsByEndpointsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.ArgumentFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/RetrieveSta" +
            "tsByEndpointsArgumentFault", Name="ArgumentFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.NoValidTargetsFoundFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/RetrieveSta" +
            "tsByEndpointsNoValidTargetsFoundFault", Name="NoValidTargetsFoundFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.TooManyConcurrentRequestsFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/RetrieveSta" +
            "tsByEndpointsTooManyConcurrentRequestsFault", Name="TooManyConcurrentRequestsFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.OperationFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/RetrieveSta" +
            "tsByEndpointsOperationFault", Name="OperationFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.SecurityFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/RetrieveSta" +
            "tsByEndpointsSecurityFault", Name="SecurityFault")]
        Ami_Diagnostic_Service.RequestToken RetrieveStatsByEndpoints(Ami_Diagnostic_Service.RetrieveStatsByEndpointsRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/RetrieveSta" +
            "tsByEndpoints", ReplyAction="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/RetrieveSta" +
            "tsByEndpointsResponse")]
        System.Threading.Tasks.Task<Ami_Diagnostic_Service.RequestToken> RetrieveStatsByEndpointsAsync(Ami_Diagnostic_Service.RetrieveStatsByEndpointsRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetRetrieve" +
            "StatsByEndpointsResult", ReplyAction="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetRetrieve" +
            "StatsByEndpointsResultResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.ArgumentFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetRetrieve" +
            "StatsByEndpointsResultArgumentFault", Name="ArgumentFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.RequestNotFoundFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetRetrieve" +
            "StatsByEndpointsResultRequestNotFoundFault", Name="RequestNotFoundFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.RequestNotFinishedFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetRetrieve" +
            "StatsByEndpointsResultRequestNotFinishedFault", Name="RequestNotFinishedFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.OperationFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetRetrieve" +
            "StatsByEndpointsResultOperationFault", Name="OperationFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.SecurityFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetRetrieve" +
            "StatsByEndpointsResultSecurityFault", Name="SecurityFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.TooManyConcurrentRequestsFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetRetrieve" +
            "StatsByEndpointsResultTooManyConcurrentRequestsFault", Name="TooManyConcurrentRequestsFault")]
        Ami_Diagnostic_Service.RetrieveStatsByEndpointsResult GetRetrieveStatsByEndpointsResult(Ami_Diagnostic_Service.RequestToken input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetRetrieve" +
            "StatsByEndpointsResult", ReplyAction="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetRetrieve" +
            "StatsByEndpointsResultResponse")]
        System.Threading.Tasks.Task<Ami_Diagnostic_Service.RetrieveStatsByEndpointsResult> GetRetrieveStatsByEndpointsResultAsync(Ami_Diagnostic_Service.RequestToken input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/DevicePingB" +
            "yEndpoints", ReplyAction="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/DevicePingB" +
            "yEndpointsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.ArgumentFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/DevicePingB" +
            "yEndpointsArgumentFault", Name="ArgumentFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.NoValidTargetsFoundFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/DevicePingB" +
            "yEndpointsNoValidTargetsFoundFault", Name="NoValidTargetsFoundFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.TooManyConcurrentRequestsFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/DevicePingB" +
            "yEndpointsTooManyConcurrentRequestsFault", Name="TooManyConcurrentRequestsFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.OperationFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/DevicePingB" +
            "yEndpointsOperationFault", Name="OperationFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.SecurityFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/DevicePingB" +
            "yEndpointsSecurityFault", Name="SecurityFault")]
        Ami_Diagnostic_Service.RequestToken DevicePingByEndpoints(Ami_Diagnostic_Service.DevicePingByEndpointsRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/DevicePingB" +
            "yEndpoints", ReplyAction="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/DevicePingB" +
            "yEndpointsResponse")]
        System.Threading.Tasks.Task<Ami_Diagnostic_Service.RequestToken> DevicePingByEndpointsAsync(Ami_Diagnostic_Service.DevicePingByEndpointsRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetDevicePi" +
            "ngByEndpointsResult", ReplyAction="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetDevicePi" +
            "ngByEndpointsResultResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.ArgumentFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetDevicePi" +
            "ngByEndpointsResultArgumentFault", Name="ArgumentFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.RequestNotFoundFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetDevicePi" +
            "ngByEndpointsResultRequestNotFoundFault", Name="RequestNotFoundFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.RequestNotFinishedFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetDevicePi" +
            "ngByEndpointsResultRequestNotFinishedFault", Name="RequestNotFinishedFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.OperationFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetDevicePi" +
            "ngByEndpointsResultOperationFault", Name="OperationFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.SecurityFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetDevicePi" +
            "ngByEndpointsResultSecurityFault", Name="SecurityFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.TooManyConcurrentRequestsFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetDevicePi" +
            "ngByEndpointsResultTooManyConcurrentRequestsFault", Name="TooManyConcurrentRequestsFault")]
        Ami_Diagnostic_Service.DevicePingByEndpointsResult GetDevicePingByEndpointsResult(Ami_Diagnostic_Service.RequestToken input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetDevicePi" +
            "ngByEndpointsResult", ReplyAction="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetDevicePi" +
            "ngByEndpointsResultResponse")]
        System.Threading.Tasks.Task<Ami_Diagnostic_Service.DevicePingByEndpointsResult> GetDevicePingByEndpointsResultAsync(Ami_Diagnostic_Service.RequestToken input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/RetrieveTlv" +
            "ByEndpoints", ReplyAction="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/RetrieveTlv" +
            "ByEndpointsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.ArgumentFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/RetrieveTlv" +
            "ByEndpointsArgumentFault", Name="ArgumentFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.NoValidTargetsFoundFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/RetrieveTlv" +
            "ByEndpointsNoValidTargetsFoundFault", Name="NoValidTargetsFoundFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.TooManyConcurrentRequestsFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/RetrieveTlv" +
            "ByEndpointsTooManyConcurrentRequestsFault", Name="TooManyConcurrentRequestsFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.OperationFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/RetrieveTlv" +
            "ByEndpointsOperationFault", Name="OperationFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.SecurityFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/RetrieveTlv" +
            "ByEndpointsSecurityFault", Name="SecurityFault")]
        Ami_Diagnostic_Service.RequestToken RetrieveTlvByEndpoints(Ami_Diagnostic_Service.RetrieveTlvByEndpointsRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/RetrieveTlv" +
            "ByEndpoints", ReplyAction="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/RetrieveTlv" +
            "ByEndpointsResponse")]
        System.Threading.Tasks.Task<Ami_Diagnostic_Service.RequestToken> RetrieveTlvByEndpointsAsync(Ami_Diagnostic_Service.RetrieveTlvByEndpointsRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetRetrieve" +
            "TlvByEndpointsResult", ReplyAction="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetRetrieve" +
            "TlvByEndpointsResultResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.ArgumentFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetRetrieve" +
            "TlvByEndpointsResultArgumentFault", Name="ArgumentFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.RequestNotFoundFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetRetrieve" +
            "TlvByEndpointsResultRequestNotFoundFault", Name="RequestNotFoundFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.RequestNotFinishedFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetRetrieve" +
            "TlvByEndpointsResultRequestNotFinishedFault", Name="RequestNotFinishedFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.OperationFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetRetrieve" +
            "TlvByEndpointsResultOperationFault", Name="OperationFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.SecurityFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetRetrieve" +
            "TlvByEndpointsResultSecurityFault", Name="SecurityFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.TooManyConcurrentRequestsFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetRetrieve" +
            "TlvByEndpointsResultTooManyConcurrentRequestsFault", Name="TooManyConcurrentRequestsFault")]
        Ami_Diagnostic_Service.RetrieveTlvByEndpointsResult GetRetrieveTlvByEndpointsResult(Ami_Diagnostic_Service.RequestToken input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetRetrieve" +
            "TlvByEndpointsResult", ReplyAction="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetRetrieve" +
            "TlvByEndpointsResultResponse")]
        System.Threading.Tasks.Task<Ami_Diagnostic_Service.RetrieveTlvByEndpointsResult> GetRetrieveTlvByEndpointsResultAsync(Ami_Diagnostic_Service.RequestToken input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetCurrentS" +
            "erviceState", ReplyAction="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetCurrentS" +
            "erviceStateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.OperationFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetCurrentS" +
            "erviceStateOperationFault", Name="OperationFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.SecurityFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetCurrentS" +
            "erviceStateSecurityFault", Name="SecurityFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.TooManyConcurrentRequestsFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetCurrentS" +
            "erviceStateTooManyConcurrentRequestsFault", Name="TooManyConcurrentRequestsFault")]
        Ami_Diagnostic_Service.GetCurrentServiceStateResult GetCurrentServiceState(Ami_Diagnostic_Service.GetCurrentServiceStateInput input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetCurrentS" +
            "erviceState", ReplyAction="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetCurrentS" +
            "erviceStateResponse")]
        System.Threading.Tasks.Task<Ami_Diagnostic_Service.GetCurrentServiceStateResult> GetCurrentServiceStateAsync(Ami_Diagnostic_Service.GetCurrentServiceStateInput input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetCurrentS" +
            "erviceStateByEndpoints", ReplyAction="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetCurrentS" +
            "erviceStateByEndpointsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.OperationFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetCurrentS" +
            "erviceStateByEndpointsOperationFault", Name="OperationFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.SecurityFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetCurrentS" +
            "erviceStateByEndpointsSecurityFault", Name="SecurityFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ami_Diagnostic_Service.TooManyConcurrentRequestsFault), Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetCurrentS" +
            "erviceStateByEndpointsTooManyConcurrentRequestsFault", Name="TooManyConcurrentRequestsFault")]
        Ami_Diagnostic_Service.GetCurrentServiceStateByEndpointsResult GetCurrentServiceStateByEndpoints(Ami_Diagnostic_Service.GetCurrentServiceStateByEndpointsInput input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetCurrentS" +
            "erviceStateByEndpoints", ReplyAction="http://www.itron.com/ami/2012/03/control/diagnostic/DiagnosticService/GetCurrentS" +
            "erviceStateByEndpointsResponse")]
        System.Threading.Tasks.Task<Ami_Diagnostic_Service.GetCurrentServiceStateByEndpointsResult> GetCurrentServiceStateByEndpointsAsync(Ami_Diagnostic_Service.GetCurrentServiceStateByEndpointsInput input);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface DiagnosticServiceChannel : Ami_Diagnostic_Service.DiagnosticService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class DiagnosticServiceClient : System.ServiceModel.ClientBase<Ami_Diagnostic_Service.DiagnosticService>, Ami_Diagnostic_Service.DiagnosticService
    {
        
        /// <summary>
        /// Implemente este método parcial para configurar el punto de conexión de servicio.
        /// </summary>
        /// <param name="serviceEndpoint">El punto de conexión para configurar</param>
        /// <param name="clientCredentials">Credenciales de cliente</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public DiagnosticServiceClient() : 
                base(DiagnosticServiceClient.GetDefaultBinding(), DiagnosticServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_DiagnosticService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public DiagnosticServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(DiagnosticServiceClient.GetBindingForEndpoint(endpointConfiguration), DiagnosticServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public DiagnosticServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(DiagnosticServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public DiagnosticServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(DiagnosticServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public DiagnosticServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public Ami_Diagnostic_Service.RequestToken PingByEndpoints(Ami_Diagnostic_Service.PingByEndpointsRequest request)
        {
            return base.Channel.PingByEndpoints(request);
        }
        
        public System.Threading.Tasks.Task<Ami_Diagnostic_Service.RequestToken> PingByEndpointsAsync(Ami_Diagnostic_Service.PingByEndpointsRequest request)
        {
            return base.Channel.PingByEndpointsAsync(request);
        }
        
        public Ami_Diagnostic_Service.EndpointCollectionRequestResult GetPingByEndpointsResult(Ami_Diagnostic_Service.RequestToken input)
        {
            return base.Channel.GetPingByEndpointsResult(input);
        }
        
        public System.Threading.Tasks.Task<Ami_Diagnostic_Service.EndpointCollectionRequestResult> GetPingByEndpointsResultAsync(Ami_Diagnostic_Service.RequestToken input)
        {
            return base.Channel.GetPingByEndpointsResultAsync(input);
        }
        
        public Ami_Diagnostic_Service.RequestToken PingByGroup(Ami_Diagnostic_Service.PingByGroupRequest request)
        {
            return base.Channel.PingByGroup(request);
        }
        
        public System.Threading.Tasks.Task<Ami_Diagnostic_Service.RequestToken> PingByGroupAsync(Ami_Diagnostic_Service.PingByGroupRequest request)
        {
            return base.Channel.PingByGroupAsync(request);
        }
        
        public Ami_Diagnostic_Service.GroupRequestResult GetPingByGroupResult(Ami_Diagnostic_Service.RequestToken input)
        {
            return base.Channel.GetPingByGroupResult(input);
        }
        
        public System.Threading.Tasks.Task<Ami_Diagnostic_Service.GroupRequestResult> GetPingByGroupResultAsync(Ami_Diagnostic_Service.RequestToken input)
        {
            return base.Channel.GetPingByGroupResultAsync(input);
        }
        
        public Ami_Diagnostic_Service.RequestToken ReadFirmwareAndHardwareVersionsByMeters(Ami_Diagnostic_Service.ReadFirmwareAndHardwareVersionsByMetersRequest request)
        {
            return base.Channel.ReadFirmwareAndHardwareVersionsByMeters(request);
        }
        
        public System.Threading.Tasks.Task<Ami_Diagnostic_Service.RequestToken> ReadFirmwareAndHardwareVersionsByMetersAsync(Ami_Diagnostic_Service.ReadFirmwareAndHardwareVersionsByMetersRequest request)
        {
            return base.Channel.ReadFirmwareAndHardwareVersionsByMetersAsync(request);
        }
        
        public Ami_Diagnostic_Service.ReadFirmwareAndHardwareVersionsByMetersResult GetReadFirmwareAndHardwareVersionsByMetersResult(Ami_Diagnostic_Service.RequestToken input)
        {
            return base.Channel.GetReadFirmwareAndHardwareVersionsByMetersResult(input);
        }
        
        public System.Threading.Tasks.Task<Ami_Diagnostic_Service.ReadFirmwareAndHardwareVersionsByMetersResult> GetReadFirmwareAndHardwareVersionsByMetersResultAsync(Ami_Diagnostic_Service.RequestToken input)
        {
            return base.Channel.GetReadFirmwareAndHardwareVersionsByMetersResultAsync(input);
        }
        
        public Ami_Diagnostic_Service.RequestToken ReregisterByMeters(Ami_Diagnostic_Service.ReregisterByMetersRequest request)
        {
            return base.Channel.ReregisterByMeters(request);
        }
        
        public System.Threading.Tasks.Task<Ami_Diagnostic_Service.RequestToken> ReregisterByMetersAsync(Ami_Diagnostic_Service.ReregisterByMetersRequest request)
        {
            return base.Channel.ReregisterByMetersAsync(request);
        }
        
        public Ami_Diagnostic_Service.EndpointCollectionRequestResult GetReregisterByMetersResult(Ami_Diagnostic_Service.RequestToken input)
        {
            return base.Channel.GetReregisterByMetersResult(input);
        }
        
        public System.Threading.Tasks.Task<Ami_Diagnostic_Service.EndpointCollectionRequestResult> GetReregisterByMetersResultAsync(Ami_Diagnostic_Service.RequestToken input)
        {
            return base.Channel.GetReregisterByMetersResultAsync(input);
        }
        
        public Ami_Diagnostic_Service.RequestToken ReadRfLanClockByMeters(Ami_Diagnostic_Service.ReadRfLanClockByMetersRequest request)
        {
            return base.Channel.ReadRfLanClockByMeters(request);
        }
        
        public System.Threading.Tasks.Task<Ami_Diagnostic_Service.RequestToken> ReadRfLanClockByMetersAsync(Ami_Diagnostic_Service.ReadRfLanClockByMetersRequest request)
        {
            return base.Channel.ReadRfLanClockByMetersAsync(request);
        }
        
        public Ami_Diagnostic_Service.ReadRfLanClockByMetersResult GetReadRfLanClockByMetersResult(Ami_Diagnostic_Service.RequestToken input)
        {
            return base.Channel.GetReadRfLanClockByMetersResult(input);
        }
        
        public System.Threading.Tasks.Task<Ami_Diagnostic_Service.ReadRfLanClockByMetersResult> GetReadRfLanClockByMetersResultAsync(Ami_Diagnostic_Service.RequestToken input)
        {
            return base.Channel.GetReadRfLanClockByMetersResultAsync(input);
        }
        
        public Ami_Diagnostic_Service.RequestToken ReadDisconnectStateByMeters(Ami_Diagnostic_Service.ReadDisconnectStateByMetersRequest request)
        {
            return base.Channel.ReadDisconnectStateByMeters(request);
        }
        
        public System.Threading.Tasks.Task<Ami_Diagnostic_Service.RequestToken> ReadDisconnectStateByMetersAsync(Ami_Diagnostic_Service.ReadDisconnectStateByMetersRequest request)
        {
            return base.Channel.ReadDisconnectStateByMetersAsync(request);
        }
        
        public Ami_Diagnostic_Service.ReadDisconnectStateByMetersResult GetReadDisconnectStateByMetersResult(Ami_Diagnostic_Service.RequestToken input)
        {
            return base.Channel.GetReadDisconnectStateByMetersResult(input);
        }
        
        public System.Threading.Tasks.Task<Ami_Diagnostic_Service.ReadDisconnectStateByMetersResult> GetReadDisconnectStateByMetersResultAsync(Ami_Diagnostic_Service.RequestToken input)
        {
            return base.Channel.GetReadDisconnectStateByMetersResultAsync(input);
        }
        
        public Ami_Diagnostic_Service.RequestToken RetrieveStatsByEndpoints(Ami_Diagnostic_Service.RetrieveStatsByEndpointsRequest request)
        {
            return base.Channel.RetrieveStatsByEndpoints(request);
        }
        
        public System.Threading.Tasks.Task<Ami_Diagnostic_Service.RequestToken> RetrieveStatsByEndpointsAsync(Ami_Diagnostic_Service.RetrieveStatsByEndpointsRequest request)
        {
            return base.Channel.RetrieveStatsByEndpointsAsync(request);
        }
        
        public Ami_Diagnostic_Service.RetrieveStatsByEndpointsResult GetRetrieveStatsByEndpointsResult(Ami_Diagnostic_Service.RequestToken input)
        {
            return base.Channel.GetRetrieveStatsByEndpointsResult(input);
        }
        
        public System.Threading.Tasks.Task<Ami_Diagnostic_Service.RetrieveStatsByEndpointsResult> GetRetrieveStatsByEndpointsResultAsync(Ami_Diagnostic_Service.RequestToken input)
        {
            return base.Channel.GetRetrieveStatsByEndpointsResultAsync(input);
        }
        
        public Ami_Diagnostic_Service.RequestToken DevicePingByEndpoints(Ami_Diagnostic_Service.DevicePingByEndpointsRequest request)
        {
            return base.Channel.DevicePingByEndpoints(request);
        }
        
        public System.Threading.Tasks.Task<Ami_Diagnostic_Service.RequestToken> DevicePingByEndpointsAsync(Ami_Diagnostic_Service.DevicePingByEndpointsRequest request)
        {
            return base.Channel.DevicePingByEndpointsAsync(request);
        }
        
        public Ami_Diagnostic_Service.DevicePingByEndpointsResult GetDevicePingByEndpointsResult(Ami_Diagnostic_Service.RequestToken input)
        {
            return base.Channel.GetDevicePingByEndpointsResult(input);
        }
        
        public System.Threading.Tasks.Task<Ami_Diagnostic_Service.DevicePingByEndpointsResult> GetDevicePingByEndpointsResultAsync(Ami_Diagnostic_Service.RequestToken input)
        {
            return base.Channel.GetDevicePingByEndpointsResultAsync(input);
        }
        
        public Ami_Diagnostic_Service.RequestToken RetrieveTlvByEndpoints(Ami_Diagnostic_Service.RetrieveTlvByEndpointsRequest request)
        {
            return base.Channel.RetrieveTlvByEndpoints(request);
        }
        
        public System.Threading.Tasks.Task<Ami_Diagnostic_Service.RequestToken> RetrieveTlvByEndpointsAsync(Ami_Diagnostic_Service.RetrieveTlvByEndpointsRequest request)
        {
            return base.Channel.RetrieveTlvByEndpointsAsync(request);
        }
        
        public Ami_Diagnostic_Service.RetrieveTlvByEndpointsResult GetRetrieveTlvByEndpointsResult(Ami_Diagnostic_Service.RequestToken input)
        {
            return base.Channel.GetRetrieveTlvByEndpointsResult(input);
        }
        
        public System.Threading.Tasks.Task<Ami_Diagnostic_Service.RetrieveTlvByEndpointsResult> GetRetrieveTlvByEndpointsResultAsync(Ami_Diagnostic_Service.RequestToken input)
        {
            return base.Channel.GetRetrieveTlvByEndpointsResultAsync(input);
        }
        
        public Ami_Diagnostic_Service.GetCurrentServiceStateResult GetCurrentServiceState(Ami_Diagnostic_Service.GetCurrentServiceStateInput input)
        {
            return base.Channel.GetCurrentServiceState(input);
        }
        
        public System.Threading.Tasks.Task<Ami_Diagnostic_Service.GetCurrentServiceStateResult> GetCurrentServiceStateAsync(Ami_Diagnostic_Service.GetCurrentServiceStateInput input)
        {
            return base.Channel.GetCurrentServiceStateAsync(input);
        }
        
        public Ami_Diagnostic_Service.GetCurrentServiceStateByEndpointsResult GetCurrentServiceStateByEndpoints(Ami_Diagnostic_Service.GetCurrentServiceStateByEndpointsInput input)
        {
            return base.Channel.GetCurrentServiceStateByEndpoints(input);
        }
        
        public System.Threading.Tasks.Task<Ami_Diagnostic_Service.GetCurrentServiceStateByEndpointsResult> GetCurrentServiceStateByEndpointsAsync(Ami_Diagnostic_Service.GetCurrentServiceStateByEndpointsInput input)
        {
            return base.Channel.GetCurrentServiceStateByEndpointsAsync(input);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_DiagnosticService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("No se pudo encontrar un punto de conexión con el nombre \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_DiagnosticService))
            {
                return new System.ServiceModel.EndpointAddress("http://crsh2-p-ow-cm:8103/ami/2012/03/control/diagnostic");
            }
            throw new System.InvalidOperationException(string.Format("No se pudo encontrar un punto de conexión con el nombre \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return DiagnosticServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_DiagnosticService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return DiagnosticServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_DiagnosticService);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_DiagnosticService,
        }
    }
}
